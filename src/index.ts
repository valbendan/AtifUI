import {app, BrowserWindow, ipcMain, dialog} from 'electron';
import {globalEvents} from "./events";
import {AtifRunParameters} from "./dt/atif_run_parameters";
import {RunLogic} from "./logic/run";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const RUN_WINDOW_WEBPACK_ENTRY: string;
declare const RUN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}


const createWindow = (): void => {
  // 初始化日志
  // initializeLog({spyRendererConsole: false})

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
    icon: "./icon/logo.icon"
  });


  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (app.isPackaged == false) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


ipcMain.handle(globalEvents.event_dialog_open_save_file, async (): Promise<string> => {
  const filepathList = await dialog.showOpenDialog({
    title: "Save output file to ...",
    message: "Save compute output file to ...",
    properties: ['openDirectory']
  })
  if (filepathList.filePaths.length > 0) {
    return filepathList.filePaths[0]
  }
  return null
})


ipcMain.handle(globalEvents.event_atif_start_run,
  async (event, run: AtifRunParameters): Promise<void> => {
    const runWindow = new BrowserWindow({
      height: 600,
      width: 800,
      webPreferences: {
        preload: RUN_WINDOW_WEBPACK_ENTRY,
        nodeIntegration: true,
        contextIsolation: false,
      },
      icon: "./icon/logo.icon"
    });


    // and load the index.html of the app.
    await runWindow.loadURL(RUN_WINDOW_WEBPACK_ENTRY);

    if (!app.isPackaged) {
      runWindow.webContents.openDevTools()
    }

    const logic = new RunLogic(run,
      async (chunk) => {
        await runWindow.webContents.send("stdout", chunk)
      },
      async (chunk) => {
        await runWindow.webContents.send("stderr", chunk)
      },
      async (code) => {
        await runWindow.webContents.send("exit", code)
      })

    logic.doRun()

  })
